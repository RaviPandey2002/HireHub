// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Candidate
  Recruiter
  OnBoarding
}

// enum ApplicationStatus {
//   Applied
//   Interviewed
//   Offered
//   Rejected
// }

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  password            String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  role                UserRole  @default(OnBoarding)
  isPremiumUser       Boolean?
  memberShipType      String?
  memberShipStartDate String?
  memberShipEndDate   String?
  recruiterInfo       Json?
  candidateInfo       Json?
  applications        String[]

  // accounts            Account[]
  // sessions      Session[]
  // Application Application[]
}

model Jobs {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  title       String
  location    String
  type        String
  experience  String
  description String
  skills      String
  recruiterId String
  applicants  Applicant[]
}

model Applicant {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  email  String
  userId String
  status String
  jobId  String @db.ObjectId
  job    Jobs   @relation(fields: [jobId], references: [id])
}

model Application {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  recruiterId        String              @db.ObjectId
  candidateId        String              @db.ObjectId
  name               String
  email              String
  status             String[]
  jobId              String
  jobApplicationDate DateTime
  // status             ApplicationStatus[]
}

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model VerificationToken {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String?
//   email      String?
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Session {
//   id                 String @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String    @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
